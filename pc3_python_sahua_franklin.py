# -*- coding: utf-8 -*-
"""PC3-PYTHON-SAHUA_FRANKLIN

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hzut4o3Bxmmd-8PyDOfE5IsoH0cnKTpO
"""

#Problema 1 - Fracción a porcentaje con manejo de errores

def obtener_porcentaje_combustible():
    while True:
        try:
            fraccion = input("Ingrese una fracción (X/Y): ")
            x, y = fraccion.split("/")
            x = int(x)
            y = int(y)

            if y == 0:
                raise ZeroDivisionError
            if x > y:
                print("X debe ser menor o igual a Y.")
                continue

            porcentaje = round((x / y) * 100)

            if porcentaje < 1:
                print("E")
            elif porcentaje > 99:
                print("F")
            else:
                print(f"{porcentaje}%")
            break
        except ValueError:
            print("Error: Ingrese números enteros en el formato X/Y.")
        except ZeroDivisionError:
            print("Error: El denominador no puede ser 0.")

obtener_porcentaje_combustible()

#Problema 2 - Lista de calificaciones

def leer_calificaciones():
    entrada = input("Ingrese calificaciones separadas por comas: ")
    calificaciones = entrada.split(",")
    notas = []

    for cal in calificaciones:
        try:
            notas.append(int(cal.strip()))
        except ValueError:
            print(f"'{cal}' no es un número válido.")
    print("Notas válidas registradas:", notas)

leer_calificaciones()

#Problema 3 - Clase CIRCULO

import math

class Circulo:
    def __init__(self, radio):
        self.radio = radio

    def area(self):
        return math.pi * self.radio ** 2

c1 = Circulo(10)
c2 = Circulo(20)

print("Área del círculo 1:", round(c1.area(), 2))
print("Área del círculo 2:", round(c2.area(), 2))

#Problema 4 - Rectángulo y Cuadrado

class Rectangulo:
    def __init__(self, largo, ancho):
        self.largo = largo
        self.ancho = ancho

    def area(self):
        return self.largo * self.ancho

class Cuadrado(Rectangulo):
    def __init__(self, lado):
        super().__init__(lado, lado)

r = Rectangulo(8, 12)
c = Cuadrado(10)

print("Área del rectángulo:", r.area())
print("Área del cuadrado:", c.area())

#Problema 5 - Clase Alumno

class Alumno:
    def __init__(self, nombre, registro):
        self.nombre = nombre
        self.registro = registro
        self.edad = None
        self.nota = None

    def display(self):
        print(f"Nombre: {self.nombre}, Registro: {self.registro}, Edad: {self.edad}, Nota: {self.nota}")

    def setAge(self, edad):
        self.edad = edad

    def setNota(self, nota):
        self.nota = nota

a = Alumno("Franklin", "20120187")
a.setAge(20)
a.setNota(17.5)
a.display()

#Problema 6 - API SUNAT tipo de cambio
!pip install requests

import requests

def obtener_tipo_cambio_sunat():
    compras, ventas, diferencias = [], [], []
    fechas_compras, fechas_ventas, fechas_dif = [], [], []

    for mes in range(1, 13):
        try:
            url = f"https://api.apis.net.pe/v1/tipo-cambio-sunat?month={mes}&year=2025"
            response = requests.get(url)
            data = response.json()

            for d in data:
                compra = float(d["compra"])
                venta = float(d["venta"])
                fecha = d["fecha"]

                compras.append(compra)
                ventas.append(venta)
                diferencias.append(venta - compra)
                fechas_compras.append(fecha)
                fechas_ventas.append(fecha)
                fechas_dif.append(fecha)

        except requests.RequestException:
            print("Error al conectarse al API.")

    # Resultados
    min_compra = min(compras)
    max_venta = max(ventas)
    max_dif = max(diferencias)

    print("Fecha con menor valor de compra:", fechas_compras[compras.index(min_compra)])
    print("Fecha con mayor valor de venta:", fechas_ventas[ventas.index(max_venta)])
    print("Fecha con mayor diferencia de compra/venta:", fechas_dif[diferencias.index(max_dif)])

obtener_tipo_cambio_sunat()

#Problema 7 - FIGlet
!pip install pyfiglet

from pyfiglet import Figlet
import random

figlet = Figlet()
fuentes = figlet.getFonts()

fuente = input("Ingrese el nombre de una fuente (ENTER para aleatoria): ")
texto = input("Ingrese el texto a mostrar: ")

if fuente.strip() == "":
    fuente = random.choice(fuentes)

figlet.setFont(font=fuente)
print(figlet.renderText(texto))

#Problema 8 - Imagen en ZIP
import requests
import zipfile
import os

# Descargar imagen
img_url = "https://images.unsplash.com/photo-1546527868-ccb7ee7dfa6a?q=80&w=2070&auto=format&fit=crop"
img_data = requests.get(img_url).content

# Guardar imagen
img_name = "imagen.jpg"
with open(img_name, "wb") as f:
    f.write(img_data)

# Crear archivo ZIP
zip_name = "imagen.zip"
with zipfile.ZipFile(zip_name, "w") as zipf:
    zipf.write(img_name)

print(f"Imagen guardada y comprimida como {zip_name}")

# Descomprimir archivo
with zipfile.ZipFile(zip_name, "r") as zipf:
    zipf.extractall("imagen_unzipped")

print("Imagen descomprimida en carpeta 'imagen_unzipped'")

